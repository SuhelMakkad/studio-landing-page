---
import type { HTMLAttributes } from "astro/types";

import { cva } from "class-variance-authority";
import type { VariantProps } from "class-variance-authority";

type DefaultButtonProps = HTMLAttributes<"button">;

export interface Props extends HTMLAttributes<"a" | "button">, VariantProps<typeof button> {
  href?: string;
}

const button = cva(
  [
    "font-semibold",
    "text-center",
    "rounded",
    "px-[1.2em]",
    "py-[0.6em]",
    "leading-none",
    "whitespace-nowrap",
    "transition-[transform,background-color]",
    "hover:-translate-y-1",
    "active:translate-y-0",
    "focus-visible:outline-red-500",
    "focus-visible:-translate-y-1",
  ],
  {
    variants: {
      intent: {
        primary: ["bg-blue-500", "text-white", "hover:bg-blue-600", "text-black"],
        outline: ["bg-transparent", "text-blue-600", "outline", "outline-red-300"],
      },
      size: {
        small: ["text-sm"],
        medium: ["text-base"],
        large: ["text-xl"],
      },
      uppercase: {
        true: "uppercase",
      },
      capitalize: {
        true: "capitalize",
      },
    },
    defaultVariants: {
      intent: "primary",
      size: "medium",
    },
  }
);

const {
  href,
  intent,
  size,
  uppercase,
  capitalize,
  class: className,
  ...attrs
} = Astro.props as Props;

const buttonClass = `${button({
  intent,
  size,
  uppercase,
  capitalize,
})} ${className}`;
---

{
  href ? (
    <a {...attrs} href={href} class={buttonClass}>
      <slot />
    </a>
  ) : (
    <button {...(attrs as DefaultButtonProps)} class={buttonClass}>
      <slot />
    </button>
  )
}
